{% extends 'base.html.twig' %}
{% block title %}Admin — Affichage{% endblock %}

{% block stylesheets %}
  {{ parent() }}
  <style>
    
    .display-wrap, .display-wrap *{ font-family:'Poppins',sans-serif; color:#000; }

    .display-wrap{ max-width:900px; margin:40px auto; padding:0 20px; }
    .display-wrap h1{ margin:0 0 14px; font-size:26px; font-weight:700; letter-spacing:.2px; }

    .flash{ padding:.6rem 1rem; border:1px solid #000; border-radius:0; margin:.75rem 0; background:#e7ffe7; }

    
    .group{ margin:18px 0 22px; }
    .legend{ font-weight:600; margin:0 0 10px; }

    
    .radio-row{ display:flex; gap:10px; flex-wrap:wrap; }
    .radio-chip{ position:relative; display:inline-flex; align-items:center; }
    .radio-chip input{
      position:absolute; inset:0; opacity:0; width:100%; height:100%; cursor:pointer;
    }
    .radio-chip span{
      display:inline-block; padding:10px 12px; border:1px solid #000; border-radius:0; user-select:none; line-height:1;
      transition: background .15s ease, color .15s ease, box-shadow .15s ease;
    }
    .radio-chip input:checked + span{ background:#000; color:#fff; }
    .radio-chip input:focus-visible + span{ box-shadow:0 0 0 3px rgba(0,0,0,.15); }

    
    .toolbar{
      display:flex; flex-wrap:wrap; align-items:center; gap:10px;
      margin:6px 0 12px;
    }
    .tool-input{
      padding:10px 12px; border:1px solid #000; border-radius:0; background:#fff; min-width:220px; flex:1 1 260px;
      outline:none;
    }
    .tool-input:focus{ box-shadow:0 0 0 3px rgba(0,0,0,.12); }
    .btn-black{
      appearance:none; border:1px solid #000; background:#000; color:#fff;
      padding:10px 14px; border-radius:0; font-weight:700; cursor:pointer; line-height:1; display:inline-block;
      text-decoration:none;
    }
    .btn-black:hover{ opacity:.9; }
    .btn-black:active{ opacity:.85; }
    .counter{ font-size:13px; opacity:.8; }

    
    .grid{ display:grid; grid-template-columns:repeat(auto-fill, minmax(240px, 1fr)); gap:10px; }
    .check-tile{ position:relative; display:flex; align-items:center; }
    .check-tile[hidden]{ display:none !important; }
    .check-tile input{
      position:absolute; inset:0; opacity:0; width:100%; height:100%; cursor:pointer;
    }
    .check-tile span{
      display:block; width:100%;
      padding:10px 12px; border:1px solid #000; border-radius:0; background:#fff; line-height:1.3;
      transition: background .15s ease, color .15s ease, box-shadow .15s ease;
    }
    .check-tile input:checked + span{ background:#000; color:#fff; }
    .check-tile input:focus-visible + span{ box-shadow:0 0 0 3px rgba(0,0,0,.15); }

   
    .actions{ display:flex; gap:10px; margin-top:10px; flex-wrap:wrap; }
  </style>
{% endblock %}

{% block body %}
<div class="display-wrap">
  <h1>Configurer l’affichage</h1>

  {% for m in app.flashes('success') %}
    <div class="flash">{{ m }}</div>
  {% endfor %}

  <form method="post" action="{{ path('admin_display', {mode: 'admin'}) }}">
    
    <div class="group">
      <div class="legend">Direction d’affichage</div>
      <div class="radio-row">
        <label class="radio-chip">
          <input type="radio" name="direction" value="eur_to_local" {% if direction == 'eur_to_local' %}checked{% endif %}>
          <span>EUR → Devise</span>
        </label>
        <label class="radio-chip">
          <input type="radio" name="direction" value="local_to_eur" {% if direction == 'local_to_eur' %}checked{% endif %}>
          <span>Devise → EUR</span>
        </label>
      </div>
    </div>

    
    <div class="group">
      <div class="legend">Devises à afficher</div>

      
      <div class="toolbar">
        <input id="filterCurr" class="tool-input" type="search" placeholder="Rechercher une devise (pays, code)…" aria-label="Rechercher une devise">
        <button type="button" id="btnSelectAll" class="btn-black">Tout sélectionner</button>
        <button type="button" id="btnClearAll" class="btn-black">Tout désélectionner</button>
        <span class="counter"><span id="selCount">0</span>/<span id="totalCount">{{ currencies|length }}</span> sélectionnées</span>
      </div>

      <div id="currGrid" class="grid">
        {% for c in currencies %}
          
          <label class="check-tile" data-name="{{ (c.country ~ ' ' ~ c.code)|lower }}">
            <input type="checkbox" name="codes[]" value="{{ c.code }}" {% if c.code in selected %}checked{% endif %}>
            <span>{{ c.flag }} {{ c.country }} ({{ c.code }})</span>
          </label>
        {% endfor %}
      </div>
    </div>

  
    <div class="actions">
      <button class="btn-black" type="submit">Enregistrer</button>
      <a class="btn-black" href="{{ path('admin_screen', {mode: 'admin'}) }}" target="_blank" rel="noopener">Ouvrir l’écran</a>
    </div>
  </form>
</div>
{% endblock %}

{% block javascripts %}
  {{ parent() }}
  <script>
    (function(){
      function ready(fn){document.readyState!=='loading'?fn():document.addEventListener('DOMContentLoaded',fn);}
      ready(function(){
        var grid = document.getElementById('currGrid');
        var tiles = Array.prototype.slice.call(grid.querySelectorAll('.check-tile'));
        var filter = document.getElementById('filterCurr');
        var btnAll = document.getElementById('btnSelectAll');
        var btnNone = document.getElementById('btnClearAll');
        var selCount = document.getElementById('selCount');
        var totalCount = document.getElementById('totalCount');

        function updateCount(){
          var checked = grid.querySelectorAll('input[type="checkbox"]:checked').length;
          selCount.textContent = String(checked);
        }
        function setAll(checked){
          tiles.forEach(function(t){
            var cb = t.querySelector('input[type="checkbox"]');
            if (cb) cb.checked = checked;
          });
          updateCount();
        }
        function applyFilter(q){
          var ql = (q||'').trim().toLowerCase();
          tiles.forEach(function(t){
            var name = (t.getAttribute('data-name')||'').toLowerCase();
            var show = (ql === '') || (name.indexOf(ql) !== -1);
            t.hidden = !show;
          });
        }

      
        totalCount.textContent = String(tiles.length);
        updateCount();

        grid.addEventListener('change', function(e){
          if (e.target && e.target.matches('input[type="checkbox"]')) updateCount();
        });
        filter.addEventListener('input', function(e){ applyFilter(e.target.value); });
        btnAll.addEventListener('click', function(){ setAll(true); });
        btnNone.addEventListener('click', function(){ setAll(false); });

        
        document.addEventListener('keydown', function(e){
          if (e.key === '/' && document.activeElement !== filter){
            e.preventDefault(); filter.focus();
          }
        });
      });
    })();
  </script>
{% endblock %}

